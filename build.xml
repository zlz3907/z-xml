<project name="z-xml" default="dist" 
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
  <description>
    Easy-to-use XML and JavaBean conversion tool
  </description> 

  <!-- some variables used
       全局变量，包括项目文件目录结构的设置和对系统环境变量的引用。
    -->
  <property environment="env" />

  <property name="project.name" value="${ant.project.name}" />
  <property name="version" value="1.0" />

  <property name="src.dir" value="src" />
  <property name="src.test" value="test" />
  <property name="lib.dir" value="lib" />

  <property name="build.dir" value="bin" />
  <property name="dist.dir" value="dist" />
  <property name="dist.lib" value="${dist.dir}/${project.name}/lib" />
  <property name="target.report.dir" value="${dist.dir}/${project.name}/report" />

  <!-- ivy settings -->
  <property name="ivy.cache.dir" value="${basedir}/ivy/cache" />
  <property name="ivy.settings.dir" value="ivy/settings" />
  <ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />

  <!-- paths used for compilation and run
       这里配置classpath
    -->
  <path id="lib.path.id">
    <fileset dir="${lib.dir}" />
    <!--fileset dir="/home/kfs/apache/thrift-0.9.0/lib/java/build/lib/" /-->
  </path>
  <path id="run.path.id">
    <path refid="lib.path.id" />
    <path location="${build.dir}" />
  </path>

  <!-- target: resolve 
       实际调用ivy:retrieve
       该任务用来从资源库中下载ivy.xml文件中指定的所有项目信赖模块
    -->
  <target name="resolve" description="retreive dependencies with ivy">
    <ivy:retrieve />
  </target>

  <!-- target: report
       输出依赖解析报告
    -->
  <target name="report" depends="resolve" 
          description="generates a report of dependencies">
    <ivy:report todir="${build.dir}" />
  </target>

  <!-- target: clean-cache
       实际调用ivy:cleancache
       清理ivy缓存文件
    -->
  <target name="clean-cache" description="clean the ivy cache">
    <ivy:cleancache />
  </target>

  <!-- checkstyle
       代码规范检查，参考sun的java代码规范
       该任务执行需要在头部导入配置：
       xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
       并且ant运行时的classpath中需要包含checkstyle-5.6-all.jar
    -->
  <target name="checkstyle" 
          description="Generates a report of code convention violations.">
    <cs:checkstyle config="d:/home/lizhi/checkstyle-5.6/sun_checks.xml">
      <fileset dir="${src.dir}" includes="**/*.java" excludes="org/**" />

      <!-- Location of cache-file. Something that is project specific -->
      <!--property key="checkstyle.cache.file" file="target/cachefile"/-->
      <!--formatter type="plain"/>
          <formatter type="xml" toFile="${build.dir}/checkstyle_errors.xml"/-->
    </cs:checkstyle>
  </target>


  <!-- target: compile
       编译源码
    -->
  <target name="compile" depends="resolve" 
          description="compile the project">
    <mkdir dir="${build.dir}" />
    <javac encoding="utf-8" source="1.6" target="1.6" srcdir="${src.dir}" 
           includeantruntime="false" destdir="${build.dir}" 
           classpathref="lib.path.id" />
    <javac encoding="utf-8" source="1.6" target="1.6" srcdir="${src.test}" 
           includeantruntime="false" destdir="${build.dir}" 
           classpathref="lib.path.id" />
    <!--copydir dest="${build.dir}/conf" src="${src.dir}/conf" /-->
  </target>

  <!-- target: run
       运行java程序
    -->
  <target name="run" description="run the project">
    <property name="msg" value="hello ivy!" />
    <java classpathref="run.path.id" classname="example.Hello">
      <arg value="-message"/>
      <arg value="${msg}"/>
    </java>
  </target>

  <!-- target: clean
       清除已编译的文件
    -->
  <target name="clean" description="clean the project">
    <delete dir="${build.dir}" />
  </target>

  <!-- target: distclean
       删除已发布的项目jar包
    -->
  <target name="distclean" description="delete the project jars">
    <delete dir="{dist.lib}" />
  </target>

  <!-- target: dist
       发布项目到指定目录
    -->
  <target name="dist" depends="compile" 
          description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist.lib}" />
    <echo message="dist ............." />
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist.lib}/${project.name}-${version}.jar" 
         basedir="${build.dir}" />
  </target>

  <!-- target: test              
       运行junit测试类
    -->
  <target name="test" depends="compile"
          description="test the project">
    <mkdir dir="${target.report.dir}" />
    <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="yes">
      <formatter type="plain" usefile="false" />
      <formatter type="xml" />
      <test name="t.ztools.xml.XMLTest" 
            todir="${target.report.dir}" />
      <classpath>
        <path refid="run.path.id" />
      </classpath>
    </junit>
  </target>

  <!-- target: test-report
       运行junit测试类，并且生成测试报告
    -->
  <target name="test-report" depends="test"
          description="test project and generate junit report">
    <mkdir dir="${target.report.dir}/html" />
    <junitreport todir="${target.report.dir}">
      <fileset dir="${target.report.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report todir="${target.report.dir}/html" />
    </junitreport>
  </target>


  <!-- target: show-props
       测试build.xml里设置的属性是否正确
       basedir             the absolute path of the project's basedir (as set
       with the basedir attribute of <project>).
       ant.file            the absolute path of the buildfile.
       ant.version         the version of Ant
       ant.project.name    the name of the project that is currently executing;
       it is set in the name attribute of <project>.
       ant.project.default-target
       the name of the currently executing project's
       default target;  it is set via the default
       attribute of <project>.
       ant.project.invoked-targets
       a comma separated list of the targets that have
       been specified on the command line (the IDE,
       an <ant> task ...) when invoking the current
       project.
       ant.java.version    the JVM version Ant detected; currently it can hold
       the values "1.2", "1.3",
       "1.4",  "1.5" and "1.6".
       ant.core.lib        the absolute path of the ant.jar file.
  -->
  <target name="show-props" description="show build properties">
    <echo message="basedir: ${basedir}" />
    <echo message="ant.file: ${ant.file}" />
    <echo message="ant.version: ${ant.version}" />
    <echo message="ant.project.name: ${ant.project.name}" />
    <echo message="ant.project.default-target: ${ant.project.default-target}" />
    <echo message="ant.project.invoked-targets: ${ant.project.invoked-targets}" />
    <echo message="ant.java.version: ${ant.java.version}" />
    <echo message="ant.core.lib: ${ant.core.lib}" />
  </target>

</project>
