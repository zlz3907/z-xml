<project name="common-template" default="compile-test" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant" 
         xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
  <description>
    project description
  </description>
  
  <!-- some variables used
       全局变量
       包括项目文件目录结构的设置和对系统环境变量的引用。
  -->
  <property environment="env" />
  <property file="${basedir}/plugins/project.properties" />
  <!--
      <property name="ECLIPSE_HOME" value="d:/eclipse" />
      <property name="debuglevel" value="source,lines,vars" />
      <property name="target" value="1.6" />
      <property name="source" value="1.6" />
      <property name="encoding" value="UTF-8" />
      <property name="project.name" value="${ant.project.name}" />
      <property name="version" value="0.1.0" />
      <property name="src.dir" location="src" />
      <property name="src.core" location="src" />
      <property name="src.extends" location="extends" />
      <property name="src.test" location="test" />
      <property name="lib.dir" location="lib" />
      <property name="build.dir" location="bin" />
      <property name="dist.dir" location="dist" />
      <property name="dist.lib" location="${dist.dir}/${project.name}/lib" />
      <property name="target.report.dir" 
      location="${dist.dir}/${project.name}/report" />
      <property name="junit.report.xml.dir" 
      location="${target.report.dir}/junit-xml"/>
      <property name="junit.report.html.dir"
      location="${target.report.dir}/junit-html"/>
  -->

  <condition property="cobertura.build.xml"
             value="Warning: No found cobertura home!">
    <not>
      <available file="${cobertura.home}" type="dir"/>
    </not>
  </condition>
  <condition property="cobertura.build.xml" value="cobertura/build.xml">
    <available file="${cobertura.home}" type="dir" />
  </condition>
  <import file="${cobertura.build.xml}" optional="true" as="cobertura" />
  <condition property="isRunCoverage">
    <or>
      <matches pattern="cobertura.build.xml" string="${cobertura.build.xml}"/>
      <!--
          <resourceexists>
          <file file="${basedir}/cobertura.ser"/>
          </resourceexists>
      -->
    </or>
  </condition>
  <condition property="isWarType" value="false">
    <matches pattern="war" string="${package.type}" />
  </condition>

  <condition property="resolve.shared.settings.file"
             value="ivysettings-shared.xml">
    <isreachable timeout="2"
                 url="http://192.168.7.244:8080/job/Jcm-Project-Template/ws/plugins/ivy/settings/ivysettings-shared.xml" />
  </condition>
  <condition property="resolve.shared.settings.file"
             value="${ivy.default.settings.dir}/ivysettings-shared.xml">
    <matches pattern="405" string="405" />
  </condition>

  <!-- paths used for compilation and run
       这里配置classpath
  -->
  <!--path id="junit-path">
      <pathelement location="${ECLIPSE_HOME}/plugins/org.junit_4.8.2.v4_8_2_v20110321-1705/junit.jar" />
      <pathelement location="${ECLIPSE_HOME}/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar" />
      </path-->

  <path id="lib">
    <fileset dir="lib" includes="*.jar" />
  </path>

  <path id="classpath">
    <!--path refid="junit-path" /-->
    <path refid="lib" />
    <pathelement location="${build.src.dir}" />
    <pathelement location="${build.test.dir}" />
    <pathelement path="${env.CLASSPATH}" />
  </path>

  <!-- ivy settings -->
  <!--property name="ivy.cache.dir" value="${basedir}/.cache" /-->
  <property name="ivy.settings.dir" value="ivy/settings" />
  <ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />

  <!-- target: resolve
       实际调用ivy:retrieve
       该任务用来从资源库中下载ivy.xml文件中指定的所有项目信赖模块
  -->
  <target name="resolve"
          description="resolve and retrieve dependencies with ivy">
    <echo>${resolve.shared.settings.file}</echo>
    <ivy:retrieve />
  </target>

  <target name="generate-pom" description="Generate Maven pom">
    <ivy:makepom ivyfile="${basedir}/ivy.xml" 
                 pomfile="${basedir}/module.pom" conf="default,runtime">
      <mapping conf="default" scope="compile"/>
      <mapping conf="runtime" scope="runtime"/>
      <dependency group="com.acme" artifact="acme-logging" 
                  version="1.0" optional="true"/>
    </ivy:makepom>
  </target>

  <!-- target: clean-cache
       实际调用ivy:cleancache
       清理ivy缓存文件
  -->
  <target name="clean-cache" 
          description="resolve and retrieve dependencies with ivy">
    <ivy:cleancache />
  </target>

  <!-- target: report
       输出依赖解析报告
  -->
  <target name="report" depends="resolve" 
          description="generates a report of dependencies">
    <ivy:report todir="${report.ivy.dir}" dot="true" />
  </target>

  <target name="gen-graph" depends="report" 
          description="generates a graph of dependencies">
    <property name="dot.file" 
              value="${report.ivy.dir}/apache-depending-default.dot" />
    <property name="ivygraph.output.file" value="${report.ivy.dir}/graph.png" />
    <exec executable="dot">
      <arg line="-T png -o ${ivygraph.output.file} ${dot.file}" />
    </exec>
  </target>

  <!-- checkstyle
       代码规范检查，参考sun的java代码规范
       该任务执行需要在头部导入配置：
       xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
       并且ant运行时的classpath中需要包含checkstyle-5.6-all.jar
  -->
  <target name="checkstyle" 
          description="Generates a report of code convention violations.">
    <cs:checkstyle config="/home/zhong/java/checkstyle-5.6/sun_checks.xml">
      <fileset dir="${src.dir}" >
        <exclude name="org/**" />
        <exclude name="conf/**" />
      </fileset>
      <!-- Location of cache-file. Something that is project specific -->
      <!--property key="checkstyle.cache.file" file="target/cachefile"/-->
      <!--formatter type="plain"/>
          <formatter type="xml" toFile="${build.dir}/checkstyle_errors.xml"/-->
    </cs:checkstyle>
  </target>	

  <!-- project target -->
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp>
      <format property="current.year" pattern="yyyy" />
      <format property="DSTAMP" pattern="yyyy-MM-dd" />
      <format property="TSTAMP" pattern="HH:mm:ss" />
    </tstamp>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.src.dir}" />
    <mkdir dir="${build.test.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${test.unit.dir}" />
    <mkdir dir="${test.verify.dir}" />
    <mkdir dir="${test.integration.dir}" />
	<mkdir dir="${publish.dir}" />
    <copy includeemptydirs="false" todir="${build.src.dir}">
      <fileset dir="${src.core}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <copy includeemptydirs="false" todir="${build.test.dir}">
      <fileset dir="test">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <echo>Import ${cobertura.build.xml}, isRunCoverage is ${isRunCoverage}</echo>
    
  </target>



  <!-- target: compile
       编译源码
  -->	
  <target name="compile" description="compile the source ">
    
    <!-- Compile the java code from ${src} into ${build} -->
    <javac encoding="${encoding}" target="${target}" source="${source}" 
           debug="true" debuglevel="${debuglevel}" 
           destdir="${build.src.dir}" 
           includeantruntime="false">
      <src path="src" />
      <exclude name="example/No.java" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name='compile-test'
          description='compile the test source'>
    <echo message="${project.name}: ${ant.file}" />
    <javac encoding="${encoding}" target="${target}" source="${source}" 
           debug="true" debuglevel="${debuglevel}" 
           destdir="${build.test.dir}" 
           includeantruntime="false">
      <src path="${src.test}" />
      <!--exclude name="" /-->
      <classpath refid="classpath"/>
    </javac>

  </target>

  <!-- target: dist
       发布项目到指定目录
  -->
  <target name="package" description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist.lib}" />
    <antcall target="_packagejar" />
    <antcall target="_packagewar" />
    <antcall target="_packageminiwar" />
  </target>
  <target name="_packagejar">
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist.lib}/${project.name}-${ivy.revision}.jar" 
         basedir="${build.src.dir}" />
  </target>
  <target name="_packagewar" if="isWarType">
    <war destfile="${dist.lib}/${ivy.module}-${ivy.revision}.war" 
         webxml="${web.root}/WEB-INF/web.xml">
      <fileset dir="${web.root}"/>
      <lib dir="${lib.dir}">
      </lib>
      <classes dir="${build.src.dir}"/>
    </war>
  </target>
  <target name="_packageminiwar" if="isWarType">
    <war destfile="${dist.lib}/${ivy.module}-${ivy.revision}-mini.war" 
         webxml="${web.root}/WEB-INF/web.xml">
      <fileset dir="${web.root}">
        <exclude name="**/lib/**" />
        <exclude name="**/classes/**" />
      </fileset>
    </war>
  </target>

  <!-- target: clean
       清除已编译的文件
  -->
  <target name="buildclean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}" />
  </target>
  <!-- target: distclean
       删除已发布的项目jar包
  -->
  <target name="distclean" description="clean dist">
    <delete dir="${dist.dir}" />
  </target>
  <target name="cleanall" depends="buildclean,distclean" 
          description="clean all">
    <antcall target="_cobertura_clean" />
  </target>
  <target name="_cobertura_clean" if="isRunCoverage">
    <antcall target="cobertura.clean" />
  </target>


  <target name="build" depends="build-subprojects,build-project" />
  <target name="build-subprojects" />
  <target name="build-project" depends="compile-test" />

  <!-- target: test              
       运行junit测试类
  -->
  <target name="unit-test">
    <antcall target="coverage">
      <param name="test.fileset" value="${test.unit.dir}" />
      <param name="test.classpath" value="classpath" />
    </antcall>
    <antcall target="junit-test">
      <param name="test.fileset" value="${test.unit.dir}" />
      <param name="test.classpath" value="classpath" />
    </antcall>
  </target>

  <target name="verify-test">
    <antcall target="_run-test">
      <param name="test.fileset" value="${test.verify.dir}" />
      <param name="test.classpath" value="classpath" />
    </antcall>
  </target>

  <target name="integration-test">
    <antcall target="_run-test">
      <param name="test.fileset" value="${test.integration.dir}" />
      <param name="test.classpath" value="classpath" />
    </antcall>
  </target>
	
	<target name="junit-test" unless="isRunCoverage"
		      description="test the project">
	  <antcall target="_run-test">
	  	<param name="test.fileset" value="${test.fileset}" />
	  	<param name="test.classpath" value="${test.classpath}" />
	  </antcall>
	</target>

  <target name="_run-test">
    <mkdir dir="${junit.report.xml.dir}" />
    <junit printsummary="${junit.printsummary}" haltonerror="yes" 
           haltonfailure="yes" fork="yes" failureProperty="test.failed">
      
      <formatter type="plain" usefile="false" />
      <formatter type="xml" />
      <test name="${testcase}" todir="${junit.report.xml.dir}" if="testcase"/>
      <batchtest todir="${junit.report.xml.dir}" unless="testcase">
        <fileset dir="${test.fileset}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
      <classpath>
        <path refid="${test.classpath}" />
      </classpath>
      
    </junit>
  </target>


  <!-- target: test-report
       运行junit测试类，并且生成测试报告
  -->
  <target name="junit-test-report"
          description="test project and generate junit report">
    <mkdir dir="${junit.report.html.dir}" />
    <junitreport todir="${junit.report.xml.dir}">
      <fileset dir="${junit.report.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report todir="${junit.report.html.dir}" />
    </junitreport>
  </target>

  <!-- target: coverage
       执行测试代码，并检查测试方法的代码覆盖率。
  -->
  <target name="coverage" if="isRunCoverage"
          description="run coverage test">
    <antcall target="_cobertura_coverage" />
  </target>
  <target name="_cobertura_coverage" if="cobertura.build.xml">
    <antcall target="cobertura.coverage" />
  </target>

  <target name="tar" description="tar files" depends="resolve">
    <echo>${dist.dir}/${ivy.module}-${ivy.revision}.jar</echo>
    <delete file="${dist.dir}/${project.name}-${ivy.revision}.tar" />
    <delete file="${dist.dir}/${project.name}-${ivy.revision}.tar.gz" />
    <tar destfile="${dist.dir}/${project.name}-${ivy.revision}.tar">
      
      <tarfileset dir="${basedir}" prefix="${project.name}-${ivy.revision}"
                  preserveLeadingSlashes="true">
        <include name="${src.core}/**" />
        <include name="${src.test}/**" />
        <include name="plugins/**" />
        <include name="build.xml" />
        <include name="pom.xml" />
        <include name="ivy.xml" />
        <include name=".gitignore" />
        <include name=".classpath" />
        <include name=".project" />
        <include name="project.properties" />
      </tarfileset>
    </tar>
    <gzip destfile="${dist.dir}/${project.name}-${ivy.revision}.tar.gz"
          src="${dist.dir}/${project.name}-${ivy.revision}.tar"/>
    <delete file="${dist.dir}/${project.name}-${ivy.revision}.tar" />
  </target>

  <!-- target: publish
       发布项目到发布服务器上
  -->
  <target name="publish" description="upload jar to ivy server">
    <ivy:publish resolver="${resolver}"
                 organisation="${ivy.organisation}" 
                 module="${project.name}"
                 revision="${ivy.revision}"
                 pubrevision="${ivy.revision}"
                 overwrite="true">
      <artifacts pattern="${dist.lib}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>


  <target name="install">
    <antcall target="publish">
      <param name="resolver" value="local" />
    </antcall>
  </target>

  <target name="deploy">
    <antcall target="publish">
      <param name="resolver" value="shared" />
    </antcall>
    <copy includeemptydirs="true" todir="${dist.lib}">
      <fileset dir="${publish.dir}">
      </fileset>
    </copy>
  </target>

  <target name="copy-dependencies">
    <copy includeemptydirs="true" todir="${dist.lib}/lib">
      <fileset dir="${lib.dir}">
      </fileset>
    </copy>
  </target>
  
</project>
